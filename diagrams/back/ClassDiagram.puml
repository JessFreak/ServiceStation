@startuml
left to right direction
top to bottom direction
skinparam classAttributeIconSize 10
skinparam linetype ortho

class AppModule {
  + init(): AppModule
}

class AuthController {
  + auth(): void
  + googleAuthCallback(user: User, res: Response): void
  + register(body: RegisterDTO): void
  + login(body: LoginDTO): { token: string }
  + logout(res: Response): Response
  + getMe(user: User): User
  + deleteMe(user: User, res: Response): Promise<Response>
  + updatePassword(user: User, body: UpdatePasswordDto): Promise<void>
  + hasPassword(user: User): Promise<boolean>
}

class OrderController {
  + create(body: CreateOrderDTO): OrderResponse
  + getAll(query: OrderQueryDTO, serviceId: string, userId: string): OrderResponse[]
  + getAllAssigned(user: User, query: OrderQueryDTO): OrderResponse[]
  + updateWorker(orderId: string, body: WorkerDTO, workerId: string): OrderResponse
  + updateStatus(orderId: string, body: StatusDTO): OrderResponse
}

class ServiceController {
  + create(body: CreateServiceDTO): Service
  + getAll(query: ServiceQueryDTO): Service[]
  + update(serviceId: string, body: UpdateServiceDTO): Service
  + delete(serviceId: string): Service
}

class UserController {
  + create(body: CreateUserDto): User
  + getAll(role: string): User[]
  + update(user: User, body: UpdateUserDto): User
  + addVehicle(user: User, body: AddVehicleDto): Vehicle
  + getVehicles(user: User): Vehicle[]
  + updateVehicle(user: User, vehicleId: string, body: UpdateVehicleDto): Vehicle
  + getHistory(user: User, query: GetHistoryDto): Order[]
}

class PrismaService {
  + onModuleInit(): void
}

class AuthModule {
  + init(): AuthModule
}

class OrderModule {
  + init(): OrderModule
}

class PrismaModule {
  + init(): PrismaModule
}

class ServiceModule {
  + init(): ServiceModule
}

class UserModule {
  + init(): UserModule
}

class AuthService {
  + register(user: RegisterDTO): User
  + validatePassword(password: string, userPassword: string): void
  + getToken(userId: string): string
  + login(body: LoginDTO): { id: string }
  + validateGoogleUser(googleUser: GoogleUser): User
  + setToken(userId: string, res: Response): void
  + logout(res: Response): Response
  + deleteMe(userId: string, res: Response): Response
  + updatePassword(userId: string, body: UpdatePasswordDto): void
  + checkIfEmailOrPhoneExist(body: UpdateUserDTO, userId: string): void
  + hasPassword(userId: string): boolean
}

class OrderService {
  + create(data: CreateOrderDTO): OrderDB
  + findAvailableWorker(orderDate: string): Worker
  + getAll(query: OrderQueryDTO): OrderDB[]
  + updateWorker(id: string, workerId: string): OrderDB
  + updateStatus(id: string, status: Status): OrderDB
  + cancel(userId: string, id: string): OrderDB
}

class ServiceService {
  + create(data: CreateServiceDTO): Service
  + getAll(query: ServiceQueryDTO): Service[]
  + updateById(id: string, data: UpdateServiceDTO): Service
  + deleteById(id: string): Service
}

class UserService {
  + getAllUsers(role: RoleDTO): User[]
  + update(id: string, data: UpdateUserDTO): User
  + updateRole(adminId: string, id: string, role: Role): User
  + addVehicle(id: string, data: CreateVehicleDTO): Vehicle
  + getUserVehicles(id: string): Vehicle[]
  + updateVehicle(id: string, vehicleId: string, data: UpdateVehicleDTO): Vehicle
  + deleteVehicle(id: string, vehicleId: string): Vehicle
}

class OrderRepository {
  + create(data: Prisma.OrderUncheckedCreateInput): OrderDB
  + findMany(where: Prisma.OrderWhereInput): OrderDB[]
  + findById(id: string): OrderDB
  + updateById(id: string, data: Prisma.OrderUncheckedUpdateInput): OrderDB
}

class ServiceRepository {
  + create(data: Prisma.ServiceUncheckedCreateInput): Service
  + findMany(where: Prisma.ServiceWhereInput): Service[]
  + findById(id: string): Service
  + updateById(id: string, data: Prisma.ServiceUncheckedUpdateInput): Service
  + deleteById(id: string): Service
}

class UserRepository {
  + create(data: Prisma.UserUncheckedCreateInput): User
  + find(where: Prisma.UserWhereInput): User
  + findById(id: string): User
  + findByEmail(email: string): User
  + findByPhone(phone: string): User
  + findMany(args: Prisma.UserFindManyArgs): User[] | Worker[]
  + updateById(id: string, data: Prisma.UserUncheckedUpdateInput): User
  + deleteById(id: string): User
}

class VehicleRepository {
  + create(data: Prisma.VehicleUncheckedCreateInput): Vehicle
  + findMany(where: Prisma.VehicleWhereInput): Vehicle[]
  + findById(id: string): Vehicle
  + find(where: Prisma.VehicleWhereInput): Vehicle
  + updateById(id: string, data: Prisma.VehicleUncheckedUpdateInput): Vehicle
  + deleteById(id: string): Vehicle
}

class OrderByIdPipe {
  + canActivate(context: ExecutionContext): boolean
}

class ServiceByIdPipe {
  + canActivate(context: ExecutionContext): boolean
}

class UserByIdPipe {
  + canActivate(context: ExecutionContext): boolean
}

class VehicleByIdPipe {
  + canActivate(context: ExecutionContext): boolean
}

class GoogleOauthGuard {
  + canActivate(context: ExecutionContext): boolean
}

class JwtAuthGuard {
  + canActivate(context: ExecutionContext): boolean
}

class RoleGuard {
  + canActivate(context: ExecutionContext): boolean
}

class GoogleStrategy {
  + validate(accessToken: string, refreshToken: string, profile: GoogleProfile, done: Function): User
}

class CreateOrderPipe {
  + transform(value: CreateOrderDto): CreateOrderDto
}

AppModule -r-> PrismaModule
AppModule --up-> AuthModule
AppModule ---> UserModule
AppModule --> ServiceModule
AppModule -l> OrderModule

AuthModule -l> AuthService
AuthModule -u-> GoogleOauthGuard
AuthModule -u-> JwtAuthGuard
AuthModule -u-> GoogleStrategy
AuthModule -u-> RoleGuard
AuthModule -r> AuthController

OrderModule --> ServiceModule
OrderModule -l-> OrderService
OrderModule -u-> OrderByIdPipe
OrderModule -u-> CreateOrderPipe
OrderModule -l-> OrderController

PrismaModule -u> PrismaService
PrismaModule -r-> UserRepository
PrismaModule --> VehicleRepository
PrismaModule -u-> ServiceRepository
PrismaModule --> OrderRepository

ServiceModule -r> ServiceService
ServiceModule -l> ServiceByIdPipe
ServiceModule -l-> ServiceController

UserModule -r-> UserService
UserModule -l-> UserController
UserModule --> UserByIdPipe
UserModule --> VehicleByIdPipe

@enduml
